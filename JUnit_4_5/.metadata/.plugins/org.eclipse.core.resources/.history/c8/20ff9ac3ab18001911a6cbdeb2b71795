import java.util.EmptyStackException;
import java.util.Stack;
import java.util.logging.Logger;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import static com.google.common.truth.Truth8.*;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static com.google.common.truth.Truth.*;

@DisplayName("a stack")
public class NestedDemo {
	private static final Logger LOGGER = Logger.getLogger(NestedDemo.class.getName());

	Stack<Object> stack;

    @Test
    @DisplayName("is instantiated with new Stack()")
    void isInstantiatedWithNew() {
        new Stack<>();
        LOGGER.info("void isInstantiatedWithNew() {}");
    }
    
    @Nested
    @DisplayName("when new")
    class WhenNew {
    	
    	@BeforeEach
    	void createNewStack() {
    		LOGGER.info("@BeforeEach void WhenNew.createNewStack() {}"); 
    		stack = new Stack<>();
    	}
    	@Test
    	@DisplayName("is empty")
    	void isEmpty() {
    		LOGGER.info("@Test void WhenNew.isEmpty() {}");
    		assertThat(stack).isEmpty();
    	}
    	@Test
    	@DisplayName("throws EmptyStackException when popped")
    	void throwsExceptionWhenPopped() {
    		LOGGER.info("@Test void WhenNew.throwsExceptionWhenPopped() {}");
    		assertThrows(EmptyStackException.class, stack::pop);
    	}
    	@Test
    	@DisplayName("throws EmptyStackException when peaked")
    	void throwsExceptionWhenPeaked() {
    		LOGGER.info("@Test void WhenNew.throwsExceptionWhenPeaked() {}");
    		assertThrows(EmptyStackException.class, stack::peak);
    	}
    	
    	
    	
    }
    
    
    
    
	
	

}
